{"ast":null,"code":"var _jsxFileName = \"/Users/dylanmuroki/Library/CloudStorage/OneDrive-UNCG/Allerfence/driver/client/my-react-app/src/App.js\",\n  _s = $RefreshSig$();\n// Importing CSS file for styling\nimport \"./App.css\";\n// Importing socket.io-client library for socket connection\nimport io from \"socket.io-client\";\n// Importing useState hook from React for managing state\nimport { useState } from \"react\";\n// Importing Chat component from Chat.js file\nimport Chat from \"./Chat\";\n\n// Connecting to the server using socket.io-client\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001\");\n\n// Main App component\nfunction App() {\n  _s();\n  // State variables for username, room, and whether to show the chat window\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [showChat, setShowChat] = useState(false);\n\n  // Function to join a room\n  const joinRoom = () => {\n    // Check if username and room are not empty\n    if (username !== \"\" && room !== \"\") {\n      // Emit a \"join_room\" event to the server with the room ID\n      socket.emit(\"join_room\", room);\n      // Set showChat to true to display the chat window\n      setShowChat(true);\n    }\n  };\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: !showChat ?\n    /*#__PURE__*/\n    // If showChat is false, display the join chat form\n    _jsxDEV(\"div\", {\n      className: \"joinChatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Join A Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"John...\",\n        onChange: event => {\n          setUsername(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Room ID...\",\n        onChange: event => {\n          setRoom(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: joinRoom,\n        children: \"Join A Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // If showChat is true, display the Chat component\n    _jsxDEV(Chat, {\n      socket: socket,\n      username: username,\n      room: room\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n// Export the App component\n_s(App, \"PNnIyDYILVrwEYCLw6+QQQ0bQ6k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["io","useState","Chat","jsxDEV","_jsxDEV","socket","connect","App","_s","username","setUsername","room","setRoom","showChat","setShowChat","joinRoom","emit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","event","target","value","onClick","_c","$RefreshReg$"],"sources":["/Users/dylanmuroki/Library/CloudStorage/OneDrive-UNCG/Allerfence/driver/client/my-react-app/src/App.js"],"sourcesContent":["// Importing CSS file for styling\nimport \"./App.css\";\n// Importing socket.io-client library for socket connection\nimport io from \"socket.io-client\";\n// Importing useState hook from React for managing state\nimport { useState } from \"react\";\n// Importing Chat component from Chat.js file\nimport Chat from \"./Chat\";\n\n// Connecting to the server using socket.io-client\nconst socket = io.connect(\"http://localhost:3001\");\n\n// Main App component\nfunction App() {\n  // State variables for username, room, and whether to show the chat window\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [showChat, setShowChat] = useState(false);\n\n  // Function to join a room\n  const joinRoom = () => {\n    // Check if username and room are not empty\n    if (username !== \"\" && room !== \"\") {\n      // Emit a \"join_room\" event to the server with the room ID\n      socket.emit(\"join_room\", room);\n      // Set showChat to true to display the chat window\n      setShowChat(true);\n    }\n  };\n\n  // Render the component\n  return (\n    <div className=\"App\">\n      {/* Conditional rendering based on whether to show the chat window */}\n      {!showChat ? (\n        // If showChat is false, display the join chat form\n        <div className=\"joinChatContainer\">\n          <h3>Join A Chat</h3>\n          {/* Input field for entering username */}\n          <input\n            type=\"text\"\n            placeholder=\"John...\"\n            onChange={(event) => {\n              setUsername(event.target.value);\n            }}\n          />\n          {/* Input field for entering room ID */}\n          <input\n            type=\"text\"\n            placeholder=\"Room ID...\"\n            onChange={(event) => {\n              setRoom(event.target.value);\n            }}\n          />\n          {/* Button to join the room */}\n          <button onClick={joinRoom}>Join A Room</button>\n        </div>\n      ) : (\n        // If showChat is true, display the Chat component\n        <Chat socket={socket} username={username} room={room} />\n      )}\n    </div>\n  );\n}\n\n// Export the App component\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAO,WAAW;AAClB;AACA,OAAOA,EAAE,MAAM,kBAAkB;AACjC;AACA,SAASC,QAAQ,QAAQ,OAAO;AAChC;AACA,OAAOC,IAAI,MAAM,QAAQ;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGL,EAAE,CAACM,OAAO,CAAC,uBAAuB,CAAC;;AAElD;AACA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACA,MAAMc,QAAQ,GAAGA,CAAA,KAAM;IACrB;IACA,IAAIN,QAAQ,KAAK,EAAE,IAAIE,IAAI,KAAK,EAAE,EAAE;MAClC;MACAN,MAAM,CAACW,IAAI,CAAC,WAAW,EAAEL,IAAI,CAAC;MAC9B;MACAG,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC;;EAED;EACA,oBACEV,OAAA;IAAKa,SAAS,EAAC,KAAK;IAAAC,QAAA,EAEjB,CAACL,QAAQ;IAAA;IACR;IACAT,OAAA;MAAKa,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChCd,OAAA;QAAAc,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAEpBlB,OAAA;QACEmB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,SAAS;QACrBC,QAAQ,EAAGC,KAAK,IAAK;UACnBhB,WAAW,CAACgB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;QACjC;MAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAEFlB,OAAA;QACEmB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,YAAY;QACxBC,QAAQ,EAAGC,KAAK,IAAK;UACnBd,OAAO,CAACc,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;QAC7B;MAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAEFlB,OAAA;QAAQyB,OAAO,EAAEd,QAAS;QAAAG,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC;IAAA;IAEN;IACAlB,OAAA,CAACF,IAAI;MAACG,MAAM,EAAEA,MAAO;MAACI,QAAQ,EAAEA,QAAS;MAACE,IAAI,EAAEA;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACxD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;;AAEA;AAAAd,EAAA,CApDSD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAqDZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}